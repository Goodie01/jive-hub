/*
 * This file is generated by jOOQ.
 */
package nz.jive.hub.database.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nz.jive.hub.database.generated.Keys;
import nz.jive.hub.database.generated.Public;
import nz.jive.hub.database.generated.tables.Organisation.OrganisationPath;
import nz.jive.hub.database.generated.tables.Parameters.ParametersPath;
import nz.jive.hub.database.generated.tables.records.EventRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Event extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.event</code>
     */
    public static final Event EVENT = new Event();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>public.event.id</code>.
     */
    public final TableField<EventRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.event.organisation_id</code>.
     */
    public final TableField<EventRecord, Integer> ORGANISATION_ID = createField(DSL.name("organisation_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.event.display_name</code>.
     */
    public final TableField<EventRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.event.by_line</code>.
     */
    public final TableField<EventRecord, String> BY_LINE = createField(DSL.name("by_line"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.event.start_date</code>.
     */
    public final TableField<EventRecord, OffsetDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.event.end_date</code>.
     */
    public final TableField<EventRecord, OffsetDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.event.created_date</code>.
     */
    public final TableField<EventRecord, OffsetDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.event.last_updated_date</code>.
     */
    public final TableField<EventRecord, OffsetDateTime> LAST_UPDATED_DATE = createField(DSL.name("last_updated_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Event(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Event(Name alias, Table<EventRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    public Event(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    public Event(Name alias) {
        this(alias, EVENT);
    }

    /**
     * Create a <code>public.event</code> table reference
     */
    public Event() {
        this(DSL.name("event"), null);
    }

    public <O extends Record> Event(Table<O> path, ForeignKey<O, EventRecord> childPath, InverseForeignKey<O, EventRecord> parentPath) {
        super(path, childPath, parentPath, EVENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EventPath extends Event implements Path<EventRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EventPath(Table<O> path, ForeignKey<O, EventRecord> childPath, InverseForeignKey<O, EventRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EventPath(Name alias, Table<EventRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EventPath as(String alias) {
            return new EventPath(DSL.name(alias), this);
        }

        @Override
        public EventPath as(Name alias) {
            return new EventPath(alias, this);
        }

        @Override
        public EventPath as(Table<?> alias) {
            return new EventPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EventRecord, Integer> getIdentity() {
        return (Identity<EventRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventRecord> getPrimaryKey() {
        return Keys.EVENT_PKEY;
    }

    @Override
    public List<ForeignKey<EventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENT__EVENT_ORGANISATION_ID_FKEY);
    }

    private transient OrganisationPath _organisation;

    /**
     * Get the implicit join path to the <code>public.organisation</code> table.
     */
    public OrganisationPath organisation() {
        if (_organisation == null)
            _organisation = new OrganisationPath(this, Keys.EVENT__EVENT_ORGANISATION_ID_FKEY, null);

        return _organisation;
    }

    private transient ParametersPath _parameters;

    /**
     * Get the implicit to-many join path to the <code>public.parameters</code>
     * table
     */
    public ParametersPath parameters() {
        if (_parameters == null)
            _parameters = new ParametersPath(this, null, Keys.PARAMETERS__PARAMETERS_EVENT_ID_FKEY.getInverseKey());

        return _parameters;
    }

    @Override
    public Event as(String alias) {
        return new Event(DSL.name(alias), this);
    }

    @Override
    public Event as(Name alias) {
        return new Event(alias, this);
    }

    @Override
    public Event as(Table<?> alias) {
        return new Event(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(String name) {
        return new Event(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Name name) {
        return new Event(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Table<?> name) {
        return new Event(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Condition condition) {
        return new Event(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
