/*
 * This file is generated by jOOQ.
 */
package nz.jive.hub.database.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nz.jive.hub.database.generated.Keys;
import nz.jive.hub.database.generated.Public;
import nz.jive.hub.database.generated.tables.Organisation.OrganisationPath;
import nz.jive.hub.database.generated.tables.Parameters.ParametersPath;
import nz.jive.hub.database.generated.tables.Role.RolePath;
import nz.jive.hub.database.generated.tables.UserHasRole.UserHasRolePath;
import nz.jive.hub.database.generated.tables.UserSession.UserSessionPath;
import nz.jive.hub.database.generated.tables.records.UserDetailRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserDetail extends TableImpl<UserDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_detail</code>
     */
    public static final UserDetail USER_DETAIL = new UserDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDetailRecord> getRecordType() {
        return UserDetailRecord.class;
    }

    /**
     * The column <code>public.user_detail.id</code>.
     */
    public final TableField<UserDetailRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_detail.organisation_id</code>.
     */
    public final TableField<UserDetailRecord, Integer> ORGANISATION_ID = createField(DSL.name("organisation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_detail.email</code>.
     */
    public final TableField<UserDetailRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_detail.name</code>.
     */
    public final TableField<UserDetailRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_detail.preferred_name</code>.
     */
    public final TableField<UserDetailRecord, String> PREFERRED_NAME = createField(DSL.name("preferred_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_detail.created_date</code>.
     */
    public final TableField<UserDetailRecord, OffsetDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.user_detail.last_updated_date</code>.
     */
    public final TableField<UserDetailRecord, OffsetDateTime> LAST_UPDATED_DATE = createField(DSL.name("last_updated_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private UserDetail(Name alias, Table<UserDetailRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserDetail(Name alias, Table<UserDetailRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_detail</code> table reference
     */
    public UserDetail(String alias) {
        this(DSL.name(alias), USER_DETAIL);
    }

    /**
     * Create an aliased <code>public.user_detail</code> table reference
     */
    public UserDetail(Name alias) {
        this(alias, USER_DETAIL);
    }

    /**
     * Create a <code>public.user_detail</code> table reference
     */
    public UserDetail() {
        this(DSL.name("user_detail"), null);
    }

    public <O extends Record> UserDetail(Table<O> path, ForeignKey<O, UserDetailRecord> childPath, InverseForeignKey<O, UserDetailRecord> parentPath) {
        super(path, childPath, parentPath, USER_DETAIL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserDetailPath extends UserDetail implements Path<UserDetailRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserDetailPath(Table<O> path, ForeignKey<O, UserDetailRecord> childPath, InverseForeignKey<O, UserDetailRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserDetailPath(Name alias, Table<UserDetailRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserDetailPath as(String alias) {
            return new UserDetailPath(DSL.name(alias), this);
        }

        @Override
        public UserDetailPath as(Name alias) {
            return new UserDetailPath(alias, this);
        }

        @Override
        public UserDetailPath as(Table<?> alias) {
            return new UserDetailPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserDetailRecord, Integer> getIdentity() {
        return (Identity<UserDetailRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserDetailRecord> getPrimaryKey() {
        return Keys.USER_DETAIL_PKEY;
    }

    @Override
    public List<UniqueKey<UserDetailRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_DETAIL_ORGANISATION_ID_EMAIL_KEY);
    }

    @Override
    public List<ForeignKey<UserDetailRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_DETAIL__USER_DETAIL_ORGANISATION_ID_FKEY);
    }

    private transient OrganisationPath _organisation;

    /**
     * Get the implicit join path to the <code>public.organisation</code> table.
     */
    public OrganisationPath organisation() {
        if (_organisation == null)
            _organisation = new OrganisationPath(this, Keys.USER_DETAIL__USER_DETAIL_ORGANISATION_ID_FKEY, null);

        return _organisation;
    }

    private transient ParametersPath _parameters;

    /**
     * Get the implicit to-many join path to the <code>public.parameters</code>
     * table
     */
    public ParametersPath parameters() {
        if (_parameters == null)
            _parameters = new ParametersPath(this, null, Keys.PARAMETERS__PARAMETERS_USER_ID_FKEY.getInverseKey());

        return _parameters;
    }

    private transient UserHasRolePath _userHasRole;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_has_role</code> table
     */
    public UserHasRolePath userHasRole() {
        if (_userHasRole == null)
            _userHasRole = new UserHasRolePath(this, null, Keys.USER_HAS_ROLE__USER_HAS_ROLE_USER_ID_FKEY.getInverseKey());

        return _userHasRole;
    }

    private transient UserSessionPath _userSession;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_session</code> table
     */
    public UserSessionPath userSession() {
        if (_userSession == null)
            _userSession = new UserSessionPath(this, null, Keys.USER_SESSION__USER_SESSION_USER_ID_FKEY.getInverseKey());

        return _userSession;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.role</code>
     * table
     */
    public RolePath role() {
        return userHasRole().role();
    }

    @Override
    public UserDetail as(String alias) {
        return new UserDetail(DSL.name(alias), this);
    }

    @Override
    public UserDetail as(Name alias) {
        return new UserDetail(alias, this);
    }

    @Override
    public UserDetail as(Table<?> alias) {
        return new UserDetail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetail rename(String name) {
        return new UserDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetail rename(Name name) {
        return new UserDetail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetail rename(Table<?> name) {
        return new UserDetail(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserDetail where(Condition condition) {
        return new UserDetail(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserDetail where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserDetail where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserDetail where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserDetail where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserDetail where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserDetail where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserDetail where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserDetail whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserDetail whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
