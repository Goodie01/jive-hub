/*
 * This file is generated by jOOQ.
 */
package nz.jive.hub.database.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nz.jive.hub.database.generated.Keys;
import nz.jive.hub.database.generated.Public;
import nz.jive.hub.database.generated.tables.Organisation.OrganisationPath;
import nz.jive.hub.database.generated.tables.UserDetail.UserDetailPath;
import nz.jive.hub.database.generated.tables.records.UserSessionRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserSession extends TableImpl<UserSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_session</code>
     */
    public static final UserSession USER_SESSION = new UserSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSessionRecord> getRecordType() {
        return UserSessionRecord.class;
    }

    /**
     * The column <code>public.user_session.id</code>.
     */
    public final TableField<UserSessionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_session.organisation_id</code>.
     */
    public final TableField<UserSessionRecord, Integer> ORGANISATION_ID = createField(DSL.name("organisation_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user_session.user_id</code>.
     */
    public final TableField<UserSessionRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user_session.session_key</code>.
     */
    public final TableField<UserSessionRecord, String> SESSION_KEY = createField(DSL.name("session_key"), SQLDataType.CLOB.nullable(false), this, "");

    private UserSession(Name alias, Table<UserSessionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserSession(Name alias, Table<UserSessionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_session</code> table reference
     */
    public UserSession(String alias) {
        this(DSL.name(alias), USER_SESSION);
    }

    /**
     * Create an aliased <code>public.user_session</code> table reference
     */
    public UserSession(Name alias) {
        this(alias, USER_SESSION);
    }

    /**
     * Create a <code>public.user_session</code> table reference
     */
    public UserSession() {
        this(DSL.name("user_session"), null);
    }

    public <O extends Record> UserSession(Table<O> path, ForeignKey<O, UserSessionRecord> childPath, InverseForeignKey<O, UserSessionRecord> parentPath) {
        super(path, childPath, parentPath, USER_SESSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserSessionPath extends UserSession implements Path<UserSessionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserSessionPath(Table<O> path, ForeignKey<O, UserSessionRecord> childPath, InverseForeignKey<O, UserSessionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserSessionPath(Name alias, Table<UserSessionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserSessionPath as(String alias) {
            return new UserSessionPath(DSL.name(alias), this);
        }

        @Override
        public UserSessionPath as(Name alias) {
            return new UserSessionPath(alias, this);
        }

        @Override
        public UserSessionPath as(Table<?> alias) {
            return new UserSessionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserSessionRecord, Integer> getIdentity() {
        return (Identity<UserSessionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserSessionRecord> getPrimaryKey() {
        return Keys.USER_SESSION_PKEY;
    }

    @Override
    public List<UniqueKey<UserSessionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_SESSION_ORGANISATION_ID_SESSION_KEY_KEY);
    }

    @Override
    public List<ForeignKey<UserSessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_SESSION__USER_SESSION_ORGANISATION_ID_FKEY, Keys.USER_SESSION__USER_SESSION_USER_ID_FKEY);
    }

    private transient OrganisationPath _organisation;

    /**
     * Get the implicit join path to the <code>public.organisation</code> table.
     */
    public OrganisationPath organisation() {
        if (_organisation == null)
            _organisation = new OrganisationPath(this, Keys.USER_SESSION__USER_SESSION_ORGANISATION_ID_FKEY, null);

        return _organisation;
    }

    private transient UserDetailPath _userDetail;

    /**
     * Get the implicit join path to the <code>public.user_detail</code> table.
     */
    public UserDetailPath userDetail() {
        if (_userDetail == null)
            _userDetail = new UserDetailPath(this, Keys.USER_SESSION__USER_SESSION_USER_ID_FKEY, null);

        return _userDetail;
    }

    @Override
    public UserSession as(String alias) {
        return new UserSession(DSL.name(alias), this);
    }

    @Override
    public UserSession as(Name alias) {
        return new UserSession(alias, this);
    }

    @Override
    public UserSession as(Table<?> alias) {
        return new UserSession(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSession rename(String name) {
        return new UserSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSession rename(Name name) {
        return new UserSession(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSession rename(Table<?> name) {
        return new UserSession(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSession where(Condition condition) {
        return new UserSession(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSession where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSession where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSession where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSession where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSession where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSession where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSession where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSession whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSession whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
